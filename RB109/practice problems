Practice Test 109 written prep
1. Explain what is happening in the code below.
```
def example(str)
  i = 3
  loop do
    puts str
    i -= 1
    break if i == 0
  end
end
example( 'hello' )

The method example is defined on line 4 taking in a parameter "str". A local variable i is initialized and
set to the integer value 3 on line 5. A loop method is called passing a do-- end block to it as an argument
Inside the loop the parameter str is printed and the local varibale i is incremented downwards. The
condition to stop is met once the local variable i is equivalent to 0. Nil is returned. This is showing
method definition on lines 4-11 and method invocation on line 12.

```
2. Explain what is happening in the code below.
```
a = 4
b = 2
loop do
  c = 3
  a = c
  break
end
puts a
puts b

Local variable a is set to 4 on line 23. Local variable b is set to 2 on line 24. A loop method is called
passing a do-- end block into it as an argument. Inside the block c is initialized and set to 3. On line
27 a is set to c and now is set to the integer 3. The loop breaks on line 28. on line 30 a is output with
a value of 3 and on line 31 b is output with a value of 2. This shows the concept of variable passing
and reassignment.
Local variables initialized outside of the block are available inside the scope of the block.
```
3. Explain what is happening in the code below.
```
a = 4
loop do
  a = 5
  b = 3
  break
end
puts a
puts b

Local variable a is initialized on line 41. A loop method is called passing a do -- end block into it as
an argument. Inside the block local variable a is reassigned to the integer value 5. Variable b is
initialized on line 45 and set to the integer object with a value of 3. The loop breaks on line 46.
On line 48 a is output because the puts method is called. It outputs 5. Line 49 calls an error, because
variable is not available outside of the scope of the block. The code returns nil.
``````
4. Explain what is happening in the code below.
```
a = 4
b = 2
2.times do |a|
  a = 5
  puts a
end
puts a
puts b

On line 59, local variable a is initialized and assigned an integer value of 4. On line 60, Local
variable b is initialized and assigned an integer value of 2. On line 61 the times method is called
with a do end block passed in as an argument. inside the block variable a is set to 5 and then output
to the screen as the puts method is called on line 63. This method is run twice because 2 is the parameter
```
5. Explain what is happening in the code below.
```
def extend_greeting(greeting)
  greeting += " there"
end
greeting = "hi"
extend_greeting(greeting)
puts greeting

On line 75 a method, extend_greeting, is defined. On line 78 local variable greeting is initialized
and set to a string object "hi". On line 79, extend_greeting is invoked and returns "hi there".
However, on line 80 greeting, "hi", is output because the method is non mutating. To save the object
"hi there", one would need to either set a new variable equal to the return of extend_greeting,
newgreeting = extend_greeting(greeting) or the method would need to be mutating, line 76 being
changed to greeting << " there". This shows pass by reference used by Ruby.
```
6. What is the return value of the code below, and why?
```
[1, 2, 3].select do |num|
  num > 5
  'hi'
end

The return value of the code would be [1, 2, 3]. Select returns a new array based on the block's
return value. "hi" is truthy, thus the return value evaluates to true and all of the elements are
selected.

```
7. What is the return value of the code below, and why?
```
['ant', 'bear', 'cat'].each_with_object({}) do |value, hash|
  hash[value[0]] = value
end


```
8. What is the return value of the code below?
```
['ant', 'bear', 'caterpillar'].pop.size

The return value would be 11. .pop is called on the array, returning the last element and
.size is called on that which will return the size of the string 'caterpillar'
```
9. What will the following code output, and what will it return?
```
[1, 2, 3].any? do |num|
  puts num
  num.odd?
end

the .any? method is invoked on an array. a do end block is passed in as an argument and num as a parameter
Inside the block puts num will output the element passed in, num, so it outputs 1. line 120 has the .odd?
method evoked on the element passed in and returns true. The .any? method looks for the first true value
and will stop iterating through the elements and will return true.

```
10. What is the return value of map in the following code, and why?
```
{ a: 'ant', b: 'bear' }.map do |key, value|
  if value.size > 3
    value
  end
end

The return value of map would be a new array, [nil, 'bear']. .map always returns a new array.
On Line 131 the map method is invoked on the hash passing a do end block to it as an argument.
The parameters passed in are the key and the values in the hash. On line 132 a conditional is called
on value, where if the size or length of the string object, value, is greater than 3 value is returned
into the new array map creates. Otherwise nil is returned because the conditional evaluates to nil.
```
11. What is output by this code, and why?
```
numbers = [1, 2, 3, 4]
numbers.each do |number|
  p number
  numbers.shift(1)
end

1 and 3 is output by this code. On line 145 the local variable numbers is initialized and set to
an array.

```
12. What is output and returned by the following code, and why?
```
[[1, 2], [3, 4]].each do |arr|
  puts arr.first
end

The original array is returned, because the each method only iterates through the array and returns
the original array. 1 and 3 is output because of line 158 where the puts method is called on arr.first.
.first takes the first element of the arr array, which was the parameter of the each method.
```
13. What is the output/return of the following code? why?
```
[[1, 2], [3, 4]].map do |arr|
  puts arr.first
  arr.first
end

1 and 3 are output and [1, 3] is returned. .map is called on the array passing a do -- end block
to it as an argument with the parameter |arr|. on line 168 the puts method is called on the first element
of arr, which at the time was [1,2], the first element of the nested array. Following that, the first
element of [1, 2] is returned to a new array as called forth by the map method.
```
14. output/return? why?
```
[[1, 2], [3, 4]].map do |arr|
  arr.map do |num|
    num * 2
  end
end

.map is called on a array, taking arr as the parameter. map is called on arr taking num as a parameter
and passing a do end block to it as an argument. each element is multiplied by 2 and then returned to a
new array. the original map calls this on both nested arrays, one at a time. [2,4] is returned first and
then [6,8]. A whole new array [[2,4], [6,8]] is returned.
```
15. output/return? why?
```
[{ a: 'ant', b: 'elephant' }, { c: 'cat' }].select do |hash|
  hash.all? do |key, value|
    value[0] == key.to_s
  end
end
# => [{ :c => "cat" }]


```
